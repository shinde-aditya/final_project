generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String          @id @default(cuid())
  name               String?
  email              String          @unique
  emailVerified      DateTime?
  image              String?
  accounts           Account[]
  sessions           Session[]
  // Optional for WebAuthn support
  Authenticator      Authenticator[]
  // main
  accountName        AccountType?
  onboarding         Onboarding[]
  onboardingComplete Boolean         @default(false)
  createdAt          DateTime        @default(now())
  updatedAt          DateTime        @updatedAt
  Service            Service[]
  Booking            Booking[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Onboarding {
  id               String      @id @default(cuid())
  accountName      AccountType
  subjectIntrested String
  experience       String
  User             User?       @relation(fields: [userId], references: [id])
  userId           String?
}

model Service {
  id             String          @id @unique @default(cuid())
  serviceType    ServiceType
  title          String
  description    String
  price          Int
  duration       Int // Duration in minutes
  availableSlots AvailableSlot[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Booking        Booking[]
  User           User?           @relation(fields: [userId], references: [id])
  userId         String?
}

model AvailableSlot {
  id        String    @id @unique @default(cuid())
  startTime DateTime
  endTime   DateTime
  isBooked  Boolean   @default(false)
  Booking   Booking[]
  Service   Service?  @relation(fields: [serviceId], references: [id])
  serviceId String?
}

model Booking {
  id              String         @id @unique @default(cuid())
  status          BookingStatus  @default(Upcomming)
  bookingType     ServiceType
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  User            User?          @relation(fields: [userId], references: [id])
  userId          String?
  Service         Service?       @relation(fields: [serviceId], references: [id])
  serviceId       String?
  AvailableSlot   AvailableSlot? @relation(fields: [availableSlotId], references: [id])
  availableSlotId String?
  
}

enum BookingStatus {
  Upcomming
  Completed
}

enum AccountType {
  Tutor
  Learner
}

enum ServiceType {
  Call
  message
}
